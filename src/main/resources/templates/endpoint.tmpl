package {{endpointPackage}};

import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

import org.jhapy.commons.endpoint.BaseEndpoint;
import org.jhapy.dto.serviceQuery.ServiceResult;
import org.jhapy.dto.serviceQuery.BaseRemoteQuery;
import org.jhapy.dto.serviceQuery.generic.CountAnyMatchingQuery;
import org.jhapy.dto.serviceQuery.generic.DeleteByIdQuery;
import org.jhapy.dto.serviceQuery.generic.FindAnyMatchingQuery;
import org.jhapy.dto.serviceQuery.generic.GetByIdQuery;
import org.jhapy.dto.serviceQuery.generic.{{saveQuery}};

import {{dtoPackage}}.{{entityName}};
import {{servicePackage}}.{{entityName}}Service;
import {{mapperPackage}}.{{entityName}}Converter;

@RestController
@RequestMapping("{{restServicePrefix}}/{{serviceName}}Service")
public class {{entityName}}Endpoint extends BaseEndpoint {

  private final {{entityName}}Service {{serviceName}}Service;

  public {{entityName}}Endpoint({{entityName}}Service {{serviceName}}Service,
      {{entityName}}Converter converter) {
    super(converter);
    this.{{serviceName}}Service = {{serviceName}}Service;
  }

  protected {{entityName}}Converter getConverter() {
    return ( {{entityName}}Converter )converter;
  }

  @PostMapping(value = "/findAnyMatching")
  public ResponseEntity<ServiceResult> findAnyMatching(
      @RequestBody FindAnyMatchingQuery query) {
    var loggerPrefix = getLoggerPrefix("findAnyMatching");
    Page<{{domainPackage}}.{{entityName}}> result = {{serviceName}}Service
        .findAnyMatching(query.getQueryUsername(), query.getFilter(), query.getShowInactive(),
            converter.convert(query.getPageable()));
    return handleResult(loggerPrefix,
        toDtoPage(result, getConverter().asDTOList(result.getContent(), getContext(query))));
  }

  @PostMapping(value = "/countAnyMatching")
  public ResponseEntity<ServiceResult> countAnyMatching(@RequestBody CountAnyMatchingQuery query) {
    var loggerPrefix = getLoggerPrefix("countAnyMatching");
    return handleResult(loggerPrefix, {{serviceName}}Service
        .countAnyMatching(query.getQueryUsername(), query.getFilter(), query.getShowInactive()));
  }

  @PostMapping(value = "/getAll")
  public ResponseEntity<ServiceResult> getAll(@RequestBody BaseRemoteQuery query) {
    var loggerPrefix = getLoggerPrefix("countAnyMatching");
    return handleResult(loggerPrefix, getConverter().asDTOList({{serviceName}}Service.getAll(), getContext(query)));
  }

  @PostMapping(value = "/getById")
  public ResponseEntity<ServiceResult> getById(@RequestBody GetByIdQuery query) {
    var loggerPrefix = getLoggerPrefix("getById");
    return handleResult(loggerPrefix,getConverter().asDTO({{serviceName}}Service.load(query.getId()), getContext(query)));
  }

  @PostMapping(value = "/save")
  public ResponseEntity<ServiceResult> save(@RequestBody {{saveQuery}}<{{entityName}}> query) {
    var loggerPrefix = getLoggerPrefix("save");
    return handleResult(loggerPrefix, getConverter().asDTO({{serviceName}}Service.save(getConverter().asEntity(query.getEntity(), getContext(query))), getContext(query)));
  }

  @PostMapping(value = "/delete")
  public ResponseEntity<ServiceResult> delete(@RequestBody DeleteByIdQuery query) {
    var loggerPrefix = getLoggerPrefix("delete");
    {{serviceName}}Service.delete(query.getId());
    return handleResult(loggerPrefix);
  }
}